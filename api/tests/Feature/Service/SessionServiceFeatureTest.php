<?php

namespace Tests\Feature\Service;

use App\Models\Message;
use App\Models\Session;
use App\Service\SessionService;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Http\Request;
use Tests\TestCase;

class SessionServiceFeatureTest extends TestCase
{
    use RefreshDatabase, WithFaker;

    private SessionService $sessionService;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->sessionService = $this->app->make(SessionService::class);
    }

    /**
     * @testdox deve retornar um array com todas as conversas e suas mensagens
     */
    public function testGetSessionSuccess()
    {
        factory(Session::class, rand(5, 10))
            ->create()
            ->each(fn($session) => $session
                ->messages()
                ->save(factory(Message::class)->create()));

        $sessions = $this->sessionService->getSessions();

        $this->assertNotEmpty($sessions);
        $this->assertIsArray($sessions);
        $this->assertEquals([
            'success' => true,
            'message' => 'Conversas encontradas!',
            'data' => Session::with('messages')->get()->toArray(),
            'code' => 200
        ], $sessions);
    }

    /**
     * @testdox deve retornar um array sem as conversas
     */
    public function testGetSessionError()
    {
        $sessions = $this->sessionService->getSessions();

        $this->assertEquals([
            'success' => false,
            'message' => 'Nenhuma conversa encontrada!',
            'data' => null,
            'code' => 404
        ], $sessions);
    }

    /**
     * @testdox deve retornar um array com a sessão baseada no identificador do usuário
     */
    public function testGetSessionByIdentifierSuccess()
    {
        factory(Session::class, rand(5, 10))->create();
        $expectedSession = Session::all()->random();

        $session = $this->sessionService->getSessionByIdentifier($expectedSession->contact_identifier);

        $this->assertNotEmpty($session);
        $this->assertIsArray($session);
        $this->assertEquals([
            'success' => true,
            'message' => 'Conversa encontrada!',
            'data' => $expectedSession->toArray(),
            'code' => 200
        ], $session);
    }

    /**
     * @testdox deve retornar um array sem a conversa baseada no identificador do usuário
     */
    public function testGetSessionByIdentifierError()
    {
        $session = $this->sessionService->getSessionByIdentifier(123456789);

        $this->assertEquals([
            'success' => false,
            'message' => 'Nenhuma conversa encontrada!',
            'data' => null,
            'code' => 404
        ], $session);
    }

    /**
     * @testdox deve retornar um array com uma conversa cadastrada
     */
    public function testVerifySessionCreateSuccess()
    {
        $dataRequest = [
            'name'                  => 'Fulano',
            'platform_type'         => 'Telegram',
            'contact_identifier'    => 123456789,
            'message'               => 'Teste de mensagem',
            'date'                  => '2021-01-01'
        ];

        $request = new Request($dataRequest);

        $session = $this->sessionService->verifySession($request);

        $this->assertNotEmpty($session);
        $this->assertIsArray($session);
        $this->assertEquals([
            'success' => true,
            'message' => 'Conversa registrada com sucesso!',
            'data' => [
                'id'                    => 1,
                'name'                  => 'Fulano',
                'platform_type'         => 'Telegram',
                'contact_identifier'    => 123456789,
                'message'               => [
                    "id" => 1,
                    "session_id" => 1,
                    "content" => "Teste de mensagem",
                    "date" => "2021-01-01",
                ]
            ],
            'code' => '201'
        ], $session);
    }

    /**
     * @testdox deve retornar um array com uma convesa atualizada
     */
    public function testVerifySessionUpdateSuccess()
    {
        factory(Session::class)->create([
            'name'                  => 'Fulano',
            'platform_type'         => 'Telegram',
            'contact_identifier'    => 123456789,
        ]);

        $dataRequest = [
            'name'                  => 'Fulano',
            'platform_type'         => 'Telegram',
            'contact_identifier'    => 123456789,
            'message'               => 'Teste de mensagem',
            'date'                  => '2021-01-01'
        ];

        $request = new Request($dataRequest);

        $session = $this->sessionService->verifySession($request);

        $this->assertNotEmpty($session);
        $this->assertIsArray($session);
        $this->assertEquals([
            'success' => true,
            'message' => 'Conversa registrada com sucesso!',
            'data' => [
                'id'                    => 1,
                'name'                  => 'Fulano',
                'platform_type'         => 'Telegram',
                'contact_identifier'    => 123456789,
                'message'               => [
                    "id" => 1,
                    "session_id" => 1,
                    "content" => "Teste de mensagem",
                    "date" => "2021-01-01",
                ]
            ],
            'code' => '201'
        ], $session);
    }

    /**
     * @testdox deve deletar uma sessão
     */
    public function testShouldDeleteASession()
    {
        factory(Session::class, rand(5, 10))
            ->create()
            ->each(fn($session) => $session
                ->messages()
                ->save(factory(Message::class)->create()));

        $randomSession = Session::all()->random();

        $session = $this->sessionService->deleteSession($randomSession->contact_identifier);

        $this->assertEquals([
            'success'   => true,
            'message'   => 'Conversa excluída com sucesso!',
            'data'      => null,
            'code'      => '200'
        ], $session);
    }
}
